<!DOCTYPE html>
<html lang="en">

<head>
  <title>Artillery report</title>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.0/chart.min.js"
    integrity="sha384-scMuAXtFmPAlw0+pXLvnpHCt6VHh7AknTPdNrwiph5BA6MJWysg5WgSDl7r63txN"
    crossorigin="anonymous"></script>

  <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,300,700" rel="stylesheet" type="text/css" />
  <link href="https://fonts.googleapis.com/css?family=PT+Serif:400,700,400italic" rel="stylesheet" type="text/css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.6/moment.min.js"
    integrity="sha384-v7eExOYhwaHa3+GhP+lHytJsMcidazNdjiaggRhdbvVTVTCjweLpa23t37ZKxaCf"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"
    integrity="sha384-H6KKS1H1WwuERMSm+54dYLzjg0fKqRK5ZRyASdbrI/lwrCc6bXEmtGYr5SwvP1pZ"
    crossorigin="anonymous"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.2.0/ace.js" charset="utf=8"
    integrity="sha384-5wv3YDwWXIxqoY02AhdpzGtKzSx7IoLw86ObEolywSYRKXx9E4rqmrU2R29LNIjR"
    crossorigin="anonymous"></script>

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-0evHe/X+R7YkIZDRvuzKMRqM+OrBnVFBL6DOitfPri4tjfHxaWutUpFmBp4vmVor" crossorigin="anonymous" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2"
    crossorigin="anonymous"></script>
  <!-- 
  <link href="https://artilleryio.github.io/artillery-tailwind/src/global.css" rel="stylesheet"
    crossorigin="anonymous" /> -->

  <!-- todo: fix link -->
  <link href="https://artilleryio.github.io/artillery-tailwind/src/build.css" rel="stylesheet" type="text/css"
    crossorigin="anonymous" />


  <style>
    html,
    body,
    p,
    li {
      --bg-dark: #161616;
      --bg: #202020;
      --fg: #2b2b2b;
      --text: #ffffff;
      --text-faded: #9b9b9b;
      --border: #383838;
      --green: #24eb70;
      --yellow: #ffd600;
      --red: #ff0000;

      font-family: sans-serif;
      font-size: 10pt;
      scroll-behavior: smooth;
      background: var(--bg);
      color: var(--text);
    }

    html {
      height: 100%;
    }

    body {
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
    }

    h1 {
      font-size: 18pt;
      font-weight: bold;
    }

    #header {
      background: var(--bg-dark);
      border-bottom: 1px solid var(--border);
      padding-top: 12px;
      margin-bottom: 24px;
    }

    .tabs {
      display: flex;
    }

    .tab {
      padding: 8px 8px 4px 8px;
      margin-right: 4px;
      color: var(--text-faded);
      background: transparent;
      transition: 0.2s;
      cursor: pointer;
      border-radius: 4px 4px 0 0;
      border-width: 1px 1px 0;
      border-color: var(--border);
      border-style: solid;
      transform: translateY(1px);
    }

    .tab.active {
      color: var(--text);
      background: var(--bg);
    }

    .summary-block {
      border: 1px solid var(--border);
    }

    #errorsContainer>p {
      color: var(--green);
    }

    #footer {
      justify-self: flex-end;
      padding: 1em;
      font-size: 0.8em;
      text-align: center;
      margin-top: 1em;
      color: var(--text-faded);
      background-color: var(--bg-dark);
    }

    #editor {
      font-size: 8pt;
    }

    #editor input,
    button {
      color: var(--bg-dark);
    }

    #counters-title {
      cursor: pointer;
      transition: 0.2s;
      display: flex;
      align-items: center;
    }

    #customCountersTable tr {
      color: var(--text-faded);
      border-bottom: 1px solid var(--fg);
      border-width: 1px 0 1px 0;
      transition: 0.2s;
    }

    #customCountersTable tr:hover {
      background: var(--fg);
    }

    td {
      padding: 8px 4px;
    }

    /* .section {
      border-radius: 4px;
      border: 1px solid var(--border);
      margin-bottom: 8px;
    }

    .section-title {
      background: var(--border);
      padding: 8px;
    }

    .chart-container {
      margin-bottom: 20px;
    } */

    #index-tree {
      top: 0px;
      position: sticky;
      background: var(--bg);
    }

    .index-item {
      padding: 0 4px;
      color: var(--text-faded);
    }

    .index-item a {

      cursor: pointer;
      transition: 0.2s;
    }

    .index-item a:hover {
      color: var(--text);
    }

    .index-item:hover {
      color: var(--text);
    }

    .index-node {
      margin-left: 0.8rem;
      padding: 1rem;

    }

    .index-node:last-child {
      margin-bottom: 1rem;
    }

    .index-parent {
      padding: 8px 2px;
      cursor: pointer;
    }

    .hidden {
      display: none;
    }

    .border-gray {
      border: 1px solid var(--border);
    }

    .border-bottom-gray {
      border-bottom: 1px solid var(--border);
    }

    span {
      transition: 0.2s;
      /* transform-origin: 25% 50%; */
    }

    .chevron-down span {
      transform: rotate(90deg);
    }
  </style>
</head>

<body>
  <div>
    <header class="header bg-black-default px-4">
      <div class="container relative m-auto flex items-center py-3">
        <!-- logo -->
        <div style="border-radius: 100%; border: 1px solid var(--border); padding: 2px; margin-right: 8px">
          <svg width="50" height="50" viewBox="0 0 300 306" fill="white" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M177.235 169.156L138.632 132.074L107.952 144.704L93.2929 130.623L228.213 75.9894L180.953 214.829L166.06 200.523L177.235 169.156ZM183.738 150.815L199.254 106.778L156.348 124.505L183.738 150.815Z"
              fill="white" />
            <path
              d="M136.138 135.974L175.036 173.339L208.275 137.452L221.883 150.524L136.914 242.26L123.306 229.189L162.984 186.35L124.087 148.986L84.4087 191.824L70.8005 178.752L155.769 87.0157L169.378 100.088L136.138 135.974Z"
              fill="white" />
          </svg>
        </div>
        <!-- title and timestamp -->
        <div>
          <h1 style="margin-bottom: 4px" id="report-name">
            Artillery Report
          </h1>
          <div id="timestamp"></div>
        </div>

      </div>
    </header>
    <main>
      <!-- tabs -->
      <div class="app-heading bg-black-default relative mb-9 pt-4 border-b border-gray-700 px-4">
        <div class=" container tabs">
          <div id="charts-tab" class="tab active">Charts</div>
          <div id="json-tab" class="tab">JSON Output</div>
        </div>
      </div>



      <div class="container">
        <!-- summary blocks -->
        <div class="app-test-stats w-full">
          <ul class="flex flex-wrap space-x-3.5" id="summary-blocks">
          </ul>
        </div>
        <div class="row" style="margin-top: 20px; align-items: flex-start;">
          <div id="charts-col" class="col-lg-10 space-y-4">
            <div class="rounded border-gray">
              <!-- counters summary -->
              <div id="counters-title" class="chevron-down p-3">
                <span>
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                    class="bi bi-chevron-right" viewBox="0 0 16 16">
                    <path fill-rule="evenodd"
                      d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z" />
                  </svg>
                </span>
                <div style="margin-left: 1rem">Counters</div>
              </div>
              <table id="customCountersTable" class="w-full"></table>
            </div>
            <div id="errorsChartsRow" class="row">
              <div class="col-lg-12">
                <h4><i class="fas fa-chart-area"></i> Errors at intervals</h4>
                <canvas id="errorsAtIntervalsChart"></canvas>
              </div>
            </div>
            <div class="row">
              <div class="col-lg-12">
                <!-- charts -->
                <div id="customCountersAtIntervalsChart" class="space-y-4"></div>
              </div>
            </div>
          </div>
          <div class="col-lg-2 overflow-y-scroll" style="max-height: 100vh;" id="index-tree"></div>

          <!-- json text output -->
          <div class="col-lg-12">
            <div class="hidden border-gray rounded" id="json-output">
              <div class="border-bottom-gray p-3 flex justify-between">JSON Output
                <span id="copy-json" style="cursor: pointer"><svg xmlns="http://www.w3.org/2000/svg" width="16"
                    height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
                    <path
                      d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z" />
                    <path
                      d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z" />
                  </svg></span>
              </div>
              <div id="editor"></div>
            </div>
          </div>
        </div> <!-- /.row -->


        <div class="row">
          <div class="codes-line text-center col-lg-12"></div>
        </div>
        <div class="row">
          <div class="errors-line text-center col-lg-12"></div>
        </div>
      </div>
    </main>
  </div>
  <script charset="utf-8">
    const Report = <%= report %>;

    const editor = ace.edit("editor");
    editor.getSession().setMode("ace/mode/javascript");
    editor.setValue(JSON.stringify(Report, null, 2));
    editor.gotoLine(1);
    editor.setHighlightActiveLine(false);
    editor.setOption("maxLines", 50);
    editor.setTheme("ace/theme/twilight");

    // let sanitizedName = Report.name.replace(/_/, " ").split(" ").map((w) => w[0].toUpperCase()+w.substring(1,w.length)).join(" ")
    $('#report-name').html(Report.name.replace(".json", ""))

    const l = _;

    const chartBgColors = {
      red: "rgba(255, 99, 132, 0.2)",
      orange: "rgba(255, 159, 64, 0.2)",
      yellow: "rgba(255, 205, 86, 0.2)",
      green: "rgba(75, 192, 192, 0.2)",
      blue: "rgba(54, 162, 235, 0.2)",
    };

    const chartBorderColors = {
      green: "#24EB70",
      red: "#ff0000",
      orange: "#FF6D1B",
      purple: "#6100FF",
      blue: "#0047FF"
    };

    const getHttpColor = (httpCode) => {
      const code = parseInt(httpCode, 10);

      if (code >= 100 && code < 200) {
        return chartBorderColors.blue;
      } else if (code >= 200 && code < 300) {
        return chartBorderColors.green;
      } else if (code >= 300 && code < 400) {
        return chartBorderColors.red;
      } else if (code >= 400 && code < 500) {
        return chartBorderColors.purple;
      }

      return chartBorderColors.orange;
    }

    const getLatencyColor = (latency) => {
      switch (latency) {
        case "min":
          return chartBorderColors.red;
        case "max":
          return chartBorderColors.orange;
        case "median":
          return chartBorderColors.purple;
        case "p95":
          return chartBorderColors.green;
        case "p99":
          return chartBorderColors.green;
        default:
          return '';
      }
    };

    const getCustomStats = (stats) =>
      l.omitBy(
        stats,
        (_, key) =>
          key.startsWith("errors.") ||
          key.startsWith("core.") ||
          key.startsWith("engine.")
      );

    const scenarioCounts = l.pickBy(Report.aggregate.counters, (_, key) =>
      key.startsWith("vusers.created_by_name")
    );

    if (l.size(scenarioCounts) > 0) {
      l.each(scenarioCounts, function (count, key) {
        const [, , name] = key.split(".");

        const $tdName = $("<td>" + name + "</td>");
        const percentage =
          Math.round(
            (count / Report.aggregate.counters["vusers.created"]) *
            100 *
            1000
          ) / 1000;
        const $tdCount = $("<td>" + count + " (" + percentage + "%)" + "</td>");
        $("<tr></tr>")
          .append($tdName)
          .append($tdCount)
          .appendTo($("#scenarioCounts"));
      });
    } else {
      $("#scenarioCountsContainer").hide();
    }

    const httpCodes = l.pickBy(Report.aggregate.counters, (_, key) =>
      key.startsWith("http.codes")
    );

    const errors = l.pickBy(Report.aggregate.counters, (_, key) =>
      key.startsWith("errors.")
    );
    if (l.size(errors) > 0) {
      l.each(errors, function (count, error) {
        const [, errorDetail] = error.split("errors.");

        $("<tr></tr>")
          .append($("<td>" + errorDetail + "</td>"))
          .append($("<td>" + count + "</td>"))
          .appendTo($("#errors"));
      });
    } else {
      $("#errorsContainer > p").html(
        "&#10004; Test completed without network or OS errors."
      );
    }

    const getTimePeriodAggregates = (summaries) => {
      const summary =
        summaries["socketio.response_time"] ||
        summaries["http.response_time"];
      const metrics = ["min", "max", "median", "p95", "p99"];

      return l.pickBy(summary, (_, key) => metrics.includes(key));
    };

    const getLatencyDistribution = (data) => {
      return l.reduce(
        data,
        (acc, value, key) => {
          acc.labels.push(key);
          acc.values.push(value);

          return acc;
        },
        { labels: [], values: [] }
      );
    };

    const randomRgbColor = () => {
      const r = Math.floor(Math.random() * 256);
      const g = Math.floor(Math.random() * 256);
      const b = Math.floor(Math.random() * 256);

      return "rgb(" + r + ", " + g + ", " + b + ")";
    };

    const latencyDistributionData = getLatencyDistribution(
      getTimePeriodAggregates(Report.aggregate.summaries)
    );

    const latencyAtIntervalsData = (intermediates = []) => {
      const data = intermediates.reduce(
        (acc, entry, idx) => {
          const latencies = getTimePeriodAggregates(entry.summaries);

          l.each(latencies, (latency, key) => {
            acc.values[key] = acc.values[key] || [];

            acc.values[key].push(latency);
          });

          acc.labels.push((idx + 1) * 10);

          return acc;
        },
        { labels: [], values: {} }
      );

      return {
        labels: data.labels,
        datasets: l.map(data.values, (entry, key) => {
          const color = getLatencyColor(key);

          return {
            label: key,
            data: entry,
            fill: false,
            backgroundColor: color,
            borderColor: color,
            tension: 0.5,
          };
        })
      };
    };


    const getMeanRpsData = (intermediates = []) => {
      const data = intermediates.reduce(
        (acc, entry, idx) => {
          const count =
            entry.rates["http.request_rate"] ||
            entry.rates["socketio.emit_rate"] ||
            entry.rates["websocket.send_rate"] ||
            0;

          acc.labels.push((idx + 1) * 10);
          acc.values.push(count);

          return acc;
        },
        { labels: [], values: [] }
      );

      return {
        labels: data.labels,
        datasets: [
          {
            data: data.values,
            fill: false,
            borderColor: "#0047FF",
            tension: 0.5,
          },
        ],
      };
    };

    const getHttpCodesData = (counters) => {
      const httpCodes = l.pickBy(counters, (_, key) =>
        key.startsWith("http.codes")
      );
      const labels = [];
      const data = [];
      const bgColors = [
        "rgba(54, 232, 235, 0.5)",
        "rgba(54, 235, 93, 0.5)",
        "rgba(229, 235, 54, 0.5)",
        "rgba(166, 54, 235, 0.5)",
        "rgba(235, 54, 69, 0.5)",
      ];

      if (l.size(httpCodes) > 0) {
        l.each(httpCodes, function (count, key) {
          let [, , , code] = key.split(".");
          code = parseInt(code, 10);

          labels.push(code);
          data.push(count);
        });
      }

      return {
        labels,
        datasets: [
          {
            backgroundColor: labels.map(getHttpColor),
            hoverOffset: 4,
            data,
          },
        ],
      };
    };


    $("#timestamp").html(
      moment(Report.aggregate.period).format("DD MMM YYYY HH:mm:SS")
    );
    $('#copy-json').on("click", (e) => {
      navigator.clipboard.writeText(JSON.stringify(Report, null, 2));

      $('#copy-json').html(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard-check-fill" viewBox="0 0 16 16">
          <path d="M6.5 0A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3Zm3 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3Z"/>
          <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1A2.5 2.5 0 0 1 9.5 5h-3A2.5 2.5 0 0 1 4 2.5v-1Zm6.854 7.354-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708.708Z"/>
        </svg>`)
      setTimeout(function () {
        $('#copy-json').html(`<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
            <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
            <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
          </svg>`)
      }, 1000)
    })


    // tabs logic
    $("#charts-tab").on("click", (e) => {
      $("#charts-tab").addClass("active")
      $("#json-tab").removeClass("active")

      $("#index-tree").removeClass("hidden")
      $("#charts-col").removeClass("hidden")
      $("#json-output").addClass("hidden")
    })
    $("#json-tab").on("click", (e) => {
      $("#json-tab").addClass("active")
      $("#charts-tab").removeClass("active")

      $("#index-tree").addClass("hidden")
      $("#charts-col").addClass("hidden")
      $("#json-output").removeClass("hidden")
    })

    //counters toggle
    $("#counters-title").on("click", (e) => {
      $('#customCountersTable').hasClass("hidden") ? $('#customCountersTable').removeClass("hidden") : $('#customCountersTable').addClass("hidden")
      $('#counters-title').hasClass("chevron-down") ? $('#counters-title').removeClass("chevron-down") : $('#counters-title').addClass("chevron-down")
    })


    const stopwatch = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stopwatch" viewBox="0 0 16 16">
        <path d="M8.5 5.6a.5.5 0 1 0-1 0v2.9h-3a.5.5 0 0 0 0 1H8a.5.5 0 0 0 .5-.5V5.6z"/>
        <path d="M6.5 1A.5.5 0 0 1 7 .5h2a.5.5 0 0 1 0 1v.57c1.36.196 2.594.78 3.584 1.64a.715.715 0 0 1 .012-.013l.354-.354-.354-.353a.5.5 0 0 1 .707-.708l1.414 1.415a.5.5 0 1 1-.707.707l-.353-.354-.354.354a.512.512 0 0 1-.013.012A7 7 0 1 1 7 2.071V1.5a.5.5 0 0 1-.5-.5zM8 3a6 6 0 1 0 .001 12A6 6 0 0 0 8 3z"/>
      </svg>`
    const personPlus = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-plus" viewBox="0 0 16 16">
        <path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H1s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C9.516 10.68 8.289 10 6 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
        <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5z"/>
      </svg>`
    const personCheck = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-check" viewBox="0 0 16 16">
        <path d="M6 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0zm4 8c0 1-1 1-1 1H1s-1 0-1-1 1-4 6-4 6 3 6 4zm-1-.004c-.001-.246-.154-.986-.832-1.664C9.516 10.68 8.289 10 6 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h10z"/>
        <path fill-rule="evenodd" d="M15.854 5.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L12.5 7.793l2.646-2.647a.5.5 0 0 1 .708 0z"/>
      </svg>`
    const checkCircle = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
        <path d="M10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"/>
      </svg>`
    const xCircle = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-circle" viewBox="0 0 16 16">
        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
        <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z"/>
      </svg>`
    const hourglassTop = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hourglass-top" viewBox="0 0 16 16">
        <path d="M2 14.5a.5.5 0 0 0 .5.5h11a.5.5 0 1 0 0-1h-1v-1a4.5 4.5 0 0 0-2.557-4.06c-.29-.139-.443-.377-.443-.59v-.7c0-.213.154-.451.443-.59A4.5 4.5 0 0 0 12.5 3V2h1a.5.5 0 0 0 0-1h-11a.5.5 0 0 0 0 1h1v1a4.5 4.5 0 0 0 2.557 4.06c.29.139.443.377.443.59v.7c0 .213-.154.451-.443.59A4.5 4.5 0 0 0 3.5 13v1h-1a.5.5 0 0 0-.5.5zm2.5-.5v-1a3.5 3.5 0 0 1 1.989-3.158c.533-.256 1.011-.79 1.011-1.491v-.702s.18.101.5.101.5-.1.5-.1v.7c0 .701.478 1.236 1.011 1.492A3.5 3.5 0 0 1 11.5 13v1h-7z"/>
      </svg>`
    const hourglassBottom = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hourglass-bottom" viewBox="0 0 16 16">
        <path d="M2 1.5a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-1v1a4.5 4.5 0 0 1-2.557 4.06c-.29.139-.443.377-.443.59v.7c0 .213.154.451.443.59A4.5 4.5 0 0 1 12.5 13v1h1a.5.5 0 0 1 0 1h-11a.5.5 0 1 1 0-1h1v-1a4.5 4.5 0 0 1 2.557-4.06c.29-.139.443-.377.443-.59v-.7c0-.213-.154-.451-.443-.59A4.5 4.5 0 0 1 3.5 3V2h-1a.5.5 0 0 1-.5-.5zm2.5.5v1a3.5 3.5 0 0 0 1.989 3.158c.533.256 1.011.791 1.011 1.491v.702s.18.149.5.149.5-.15.5-.15v-.7c0-.701.478-1.236 1.011-1.492A3.5 3.5 0 0 0 11.5 3V2h-7z"/>
      </svg>`
    // summary blocks
    const timeFormat = "DD MMM YYYY HH:mm:SS"
    const timeStarted = moment(Report.aggregate.firstMetricAt)
    const timeFinished = moment(Report.aggregate.lastMetricAt)

    function getDuration(ms) {
      var minutes = Math.floor(ms / 60000);
      var seconds = ((ms % 60000) / 1000).toFixed(0);

      return minutes + "m " + (seconds < 10 ? '0' : '') + seconds + "s";

    }

    const summaryInfo = [
      { icon: stopwatch, name: "Duration", value: getDuration(timeFinished.diff(timeStarted)) || "n/a" },
      { icon: hourglassTop, name: "Started", value: timeStarted.format(timeFormat) || "n/a" },
      { icon: hourglassBottom, name: "Completed", value: timeFinished.format(timeFormat) || "n/a" },
      // { icon: personPlus, name: "Users Created", value: Report.aggregate.counters["vusers.created"] || "n/a" },
      // { icon: personCheck, name: "Users Completed", value: Report.aggregate.counters["vusers.completed"] || "n/a" },
      // {icon: "&#128337;", name: "Scenario Counts", value: "scenarioCounts"},
      { icon: errors.length ? xCircle : checkCircle, name: "Errors", value: !errors ? "n/a" : errors.length ? errors.length : "0" },
    ]

    function summaryBlock(block) {
      return (
        `<li class="summary-block flex flex-auto items-center justify-start rounded py-2 px-3 mr-4" >
              <div class="mr-3 text-gray-default">`+
        block.icon +
        `</div>
              <div style="padding: 4px;"><div class="text-gray-default">`+
        block.name +
        `</div>
              <div>
                `+ block.value + `
              </div>
              </div>
        </li>`
      )
    }

    summaryInfo.forEach((block) => {
      const appendage = summaryBlock(block)
      $("#summary-blocks").append(appendage);
    })


    if (l.size(errors) > 0) {
      const getErrorsAtIntervalsData = (intermediates = []) => {
        const data = intermediates.reduce(
          (acc, entry, idx) => {
            const errorsCounters = l.pickBy(entry.counters, (_, key) =>
              key.startsWith("errors.")
            );

            l.each(errorsCounters, (count, key) => {
              const [, errorDetail] = key.split("errors.");

              acc.values[errorDetail] = acc.values[errorDetail] || [];

              acc.values[errorDetail].push(count);
            });

            acc.labels.push((idx + 1) * 10);

            return acc;
          },
          { labels: [], values: {} }
        );

        return {
          labels: data.labels,
          datasets: l.map(data.values, (entry, key) => {
            return {
              label: key,
              data: entry,
              fill: false,
              backgroundColor: Object.values(chartBorderColors),
              borderColor: Object.values(chartBorderColors),
              tension: 0.5,
            };
          })
        };
      };


      new Chart(document.getElementById("errorsAtIntervalsChart"), {
        type: "line",
        data: getErrorsAtIntervalsData(Report.intermediate),
        options: {
          plugins: { legend: { position: "bottom" } },
          aspectRatio: 3.5,
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: "ms",
              },
            },
          },
        },
      });
    }
    !errors.length && $("#errorsChartsRow").hide();

    const unorderedCustomCounters = Report.aggregate.counters;
    const customCounters = Object.keys(unorderedCustomCounters).sort().reduce(
      (obj, key) => {
        obj[key] = unorderedCustomCounters[key];
        return obj;
      },
      {}
    );

    if (l.size(customCounters) > 0) {
      let rows = [];
      l.each(customCounters, function (count, key) {
        const row = $("<tr class='w-full'></tr>")
          .append($("<td class='p-3'>" + key + "</td>"))
          .append($("<td class='p-3'>" + count + "</td>"));
        rows.push(row);
      });

      if (rows.length > 5) {
        const visibleRows = rows.slice(0, 5);
        const hiddenRows = rows.slice(5).map((row) => row.addClass("hidden"));
        rows = [
          ...visibleRows,
          $(
            '<tr id="expandCustomCountersRow"><td class="text-center" colspan="2"><a href="" id="expandCustomCounters">+' + hiddenRows.length + ' more</a></td></tr>'
          ),
          ...hiddenRows,
        ];
      }

      rows.forEach((row) => row.appendTo($("#customCountersTable")));

      if (rows.length > 5) {
        $("#expandCustomCountersRow").on("click", (e) => {
          e.preventDefault();
          $("#customCountersTable tr").removeClass("hidden");
          $("#expandCustomCountersRow").addClass("hidden");
        });
      }

      const getCustomStatsAtIntervalsData = (intermediates = []) => {
        const data = intermediates.reduce(
          (acc, entry, idx) => {
            const customCounters = entry.counters;

            l.each(customCounters, (count, key) => {
              acc.values[key] = acc.values[key] || [];
              acc.values[key].push(count);
            });

            acc.labels.push((idx + 1) * 10);
            return acc;
          },
          { labels: [], values: {} }
        );

        return {
          labels: data.labels,
          datasets: l.map(data.values, (entry, key) => {
            color = "#0047FF";

            return {
              label: key,
              data: entry,
              fill: false,
              backgroundColor: color,
              borderColor: color,
              tension: 0.5,
            };
          }),
        };
      };

      $("#expandCustomCountersRow").on("click", (e) => {
        e.preventDefault();
        $("#customCountersTable tr").removeClass("hidden");
        $("#expandCustomCountersRow").addClass("hidden");
      });

      // create intermediate charts array
      let chartsArray = []
      Report.intermediate.forEach((interval, i) => {
        Object.keys(interval.counters).forEach((counter) => {
          chartsArray.find((chart) => chart.name == counter) || chartsArray.push({ name: counter, data: [], type: "interval" })
        })
      })

      // remove duplicates
      let chartsSet = Array.from(new Set(chartsArray))

      // add data per interval for each chart 
      chartsSet.forEach((chart, i) => {
        Report.intermediate.forEach((interval,j) => {
          const value = interval.counters[chart.name] || 0
          chartsSet[i].data.push({ counters: { [chart.name]: value } })
        })
      })

      // add summary data 
      Object.keys(Report.aggregate.summaries).forEach((summary)=> {
        const data = Report.aggregate.summaries[summary]
        chartsSet.push({name: summary, data: data, type: "aggregate"})
      })

      chartsSet = chartsSet.sort((a, b) => a.name < b.name ? -1 : 1)

      const sanitizer = /[.| |'|"]/g
      chartsSet.forEach((chart) => {
        $('#customCountersAtIntervalsChart').append("<div id='" + chart.name.replaceAll(sanitizer, "-") + "-wrapper' class=' rounded border-gray'><div class='border-bottom-gray p-3'>" + chart.name + "</div><canvas id='" + chart.name + "'></canvas></div>")
        if (chart.type === 'interval') {
          new Chart(document.getElementById(chart.name), {
            type: "bar",
            data: getCustomStatsAtIntervalsData(chart.data),
            options: {
              barPercentage: 0.2,
              plugins: { legend: { display: false } },
              aspectRatio: 2.5,
              scales: {
                y: {
                  beginAtZero: true,
                  title: {
                    display: true,
                    text: "ms",
                  },
                },
              },
            },
          });
        } else if (chart.type === 'aggregate') {
          const { labels, values } = getLatencyDistribution(
            l.pickBy(chart.data, (_, key) =>
              ["min", "max", "median", "p95", "p99"].includes(key)
            )
          );
          new Chart(document.getElementById(chart.name), {
            type: "bar",
            data: {
              labels: labels,
              datasets: [
                {
                  data: values,
                  backgroundColor: Object.values(chartBorderColors),
                  borderColor: Object.values(chartBgColors),
                  borderWidth: 1,
                },
              ],
            },
            options: {
              plugins: { legend: { display: false } },
              barPercentage: 0.4,
              scales: {
                y: {
                  beginAtZero: true,
                  title: {
                    display: true,
                    text: "ms",
                  },
                },
              },
            },
          })
        }
      })


      // parse out index tabs from custom counters for index nav
      const parentRegex = /^([^.| ]+)/
      const nodeRegex = /[ |\.](.*)/

      
      let indexSet = new Set(chartsSet.map((c) => {
        return c.name.match(parentRegex)[0]
      }))

      // create tree from index set
      let indexTree = Array.from(indexSet).sort().reduce((key, value) => {
        return { ...key, [value]: [] };
      }, {});

      // fill tree with custom counters according to parent tab
      // line graphs
      chartsSet.forEach((chart) => {        
        const parent = chart.name.match(parentRegex)[0] || chart.name
        const node = chart.name.match(nodeRegex)[1]
        console.log(parent, node)
        indexTree[parent] && indexTree[parent].push({ name: node, type: "interval" })
      })
      // bar graphs
      Object.keys(Report.aggregate.summaries).forEach((s) => {
        const node = s.match(nodeRegex) && s.match(nodeRegex).length >= 1 ? s.match(nodeRegex)[1] : parent
        const parent = s.match(parentRegex)[0] || parent
        indexTree[parent].push({ name: node, type: "aggregate" })
      })

      // sort child nodes for each tab
      for (let [key, value] of Object.entries(indexTree)) {
        indexTree = {
          ...indexTree, [key]: value.sort()
        }
      }

      const chevronRight = `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"/>
      </svg>`

      // populate index with divs

      let $htmlTree = $('<div class="py-3"></div>')
      Object.keys(indexTree).forEach((parent) => {
        const nodeClass = parent.replaceAll(sanitizer, "-")
        const nodes = indexTree[parent].map((n) =>
          '<div class="' + nodeClass + '-node index-item index-node hidden" ><a style="word-wrap: break-word;" href="#' + (parent + "-" + n.name).replaceAll(sanitizer, "-") + '-wrapper" id="' + n.name + '-node" >' + n.name + '</a></div>').join("")


        // if parent has no children render it as a link
        // if (indexTree[parent].length <= 1) {
        //   $htmlTree.append(
        //     '<div class="' + nodeClass + '-node index-item index-parent" ><a style="margin-left: 0.5rem; word-wrap: break-word;" href="#'
        //     + parent.replaceAll(sanitizer, "-") + '-wrapper" id="' + parent + '-node" >' + parent
        //     + '</a></div>'
        //   )
        // } else {
          $htmlTree.append(
            '<div id="' + nodeClass + '-parent" > <div onclick="tabClick(`' + nodeClass + '`)" class="index-item index-parent" style="display: flex;align-items: center;">' +
            '<span style="margin-right: 1rem; transition: 0.2s;">' + chevronRight + '</i></span>'//chevron
            + parent + ' metrics (' + indexTree[parent].length + ') </div>' +
            nodes +
            '</div>'
          )
        // }
      })
      const indexTreeContainer = $("#index-tree")
      $htmlTree.appendTo(indexTreeContainer)

    } else {
      $("#charts-col").hide();
      $("#customCountersContainer").hide();
    }

    function tabClick(tab) {
      const nodeClass = '.' + tab + '-node'
      const nodes = document.querySelectorAll(nodeClass);
      const parentTab = document.getElementById(tab + "-parent");
      [...parentTab.classList].includes('chevron-down') ? parentTab.classList.remove('chevron-down') : parentTab.classList.add('chevron-down');
      for (const node of nodes) {
        [...node.classList].includes("hidden") ? node.classList.remove("hidden") : node.classList.add("hidden");
      }
    }

  </script>

  <div id="footer">
    <footer>
      This report was created with
      <a href="https://artillery.io">Artillery</a> - free open-source
      load-testing for HTTP and WebSockets
    </footer>
</body>

</html>