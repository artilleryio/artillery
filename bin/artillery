#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

'use strict';

const debug = require('debug')('artillery:cli');
const updateNotifier = require('update-notifier');
const program = require('commander');
const pkg = require('../package.json');
const version = pkg.version;
const chalk = require('chalk');
const tryResolve = require('try-require').resolve;
const { rainbow } = require('../util');

const commands = require('../lib/commands');

const notifier = updateNotifier({ pkg, updateCheckInterval: 1000 * 60 * 60 * 24 });

if (notifier.update) {
  notifier.notify({
    message: `Good news! An update for ${chalk.bold(pkg.name)} is available.\n(current version: ${chalk.yellow('v' + version)} â†’ new version: ${chalk.green('v' + notifier.update.latest)})\n\nRun ${chalk.green('npm install -g ' + pkg.name + '@latest')} to upgrade`
  });
}

let pro = null;
if (tryResolve('artillery-pro')) {
  pro = require('artillery-pro');
} else {
  debug('Artillery Pro is not installed');
}

const banner = `
        ___         __  _ ____                  _
  _____/   |  _____/ /_(_) / /__  _______  __  (_)___  _____
 /____/ /| | / ___/ __/ / / / _ \\/ ___/ / / / / / __ \\/____/
/____/ ___ |/ /  / /_/ / / /  __/ /  / /_/ / / / /_/ /____/
    /_/  |_/_/   \\__/_/_/_/\\___/_/   \\__, (_)_/\\____/
                                    /____/
`;

program.option('-V, --version', 'Show version information', function() {
  console.log(banner);

  console.log('------------ Version Info ------------');
  console.log(`Artillery: ${version}`);
  if (pro) {
    console.log(`Artillery Pro: ${pro.version || 'installed'}`);
  } else {
    console.log('Artillery Pro: not installed (https://artillery.io/pro)');
  }
  console.log(`Node.js: ${process.version}`);
  console.log(`OS: ${process.platform}/${process.arch}`);
  console.log('--------------------------------------');
});

Object.keys(commands).forEach(function(name) {
  if (commands[name].getConfig) {
    let config = commands[name].getConfig();
    let command = program.command(config.command);
    command.description(config.description);
    config.options.forEach(function(option) {
      command.option(option[0], option[1]);
    });
    command.action(commands[name]);
  }
});

if (pro) {
  pro.init(program);
}

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  console.log(Math.random() * 100 > 34 ? banner : rainbow(banner));
  program.help();
} else {
  const knownCommands = program.args.filter((a) => typeof a === 'object');
  // unknown commands, --flags not included; empty if we have "--help" or "-V":
  const unknownCommands = program.args.filter((a) => typeof a !== 'object');

  if (unknownCommands.length !== 0 && knownCommands.length === 0) {
    console.log(
      `${chalk.red('  Error:')} Unknown Artillery command ${unknownCommands}`
    );
    process.exitCode = 1;
    program.help();
  }
}
