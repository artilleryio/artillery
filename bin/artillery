#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

const updateNotifier = require('update-notifier');
const program = require('commander');
const pkg = require('../package.json');
const version = pkg.version;
const chalk = require('chalk');

const commands = require('../lib/commands');

const notifier = updateNotifier({ pkg, updateCheckInterval: 1000 * 60 * 60 * 24 });

if (notifier.update) {
  notifier.notify({
    message: `ðŸ‘‹ Good news! An update is available! (${chalk.yellow('v' + version)} â†’ ${chalk.green('v' + notifier.update.latest)})\nRun ${chalk.green('npm install -g artillery@latest')} to upgrade`
  });
}

program.version(version);
program
  .command('run <script>')
  .description('Run a test script. Example: `artillery run benchmark.json`')
  .option('-t, --target <url>', 'Set target URL')
  .option('-p, --payload <path>', 'Set payload file (CSV)')
  .option('-o, --output <path>', 'Set file to write stats to (will output ' +
          'to stdout by default)')
  .option('-k, --insecure', 'This  option explicitly allows Artillery to ' +
          'perform "insecure" TLS connections, for testing with' +
          'self-signed certificates')
  .option('-e, --environment <name>', 'Specify the environment to be used')
  .option('-q, --quiet', 'Do not print anything to stdout')
  .option('-c, --config <path>', 'Load test config from a file')
  .action(commands.run);

program
  .command('quick <url>')
  .description('Run a quick test without writing a test script')
  .option('-r, --rate <number>', 'New arrivals per second')
  .option('-c, --count <number>', 'Fixed number of arrivals')
  .option('-d, --duration <seconds>', 'Duration of the arrival phase')
  .option('-n, --num <number>', 'Number of requests each new arrival will send')
  .option('-p, --payload <string>', 'Set POST payload')
  .option('-t, --content-type <string>',
          'Set content-type (defaults to application/json)')
  .option('-o, --output <path>', 'Set file to write stats to (will output to stdout by default)')
  .option('-k, --insecure', 'This  option explicitly allows Artillery to ' +
          'perform "insecure" TLS connections, for testing with' +
          'self-signed certificates')
  .option('-q, --quiet', 'Do not print anything to stdout')
  .action(commands.quick);

program
  .command('report <file>')
  .description('Create a report from a JSON file created by "artillery run"')
  .option('-o, --output <path>', 'Set file to write html report to (will open in browser by default)')
  .action(commands.report);

program
  .command('convert <file>')
  .description('Convert JSON to YAML and vice versa')
  .action(commands.convert);

program
  .command('dino')
  .description('Show dinosaur of the day')
  .option('-q, --quiet', 'Do not print anything to stdout')
  .action(commands.dino);

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.help();
}
