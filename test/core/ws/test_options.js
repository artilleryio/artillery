'use strict';

const test = require('tape');
const core = require('../../../core');
const vuserLauncher = core.runner;
const { SSMS } = require('../../../core/lib/ssms');

//
// If config.ws.rejectUnauthorized is not set, we will have an error.
// Otherwise the test will run fine.
//

test('TLS options for WebSocket', function(t) {
  const script = require('./scripts/extra_options.json');
  vuserLauncher(script).then(function(sessions) {
    sessions.on('done', function(nr) {
      const report = SSMS.legacyReport(nr).report();
      t.assert(Object.keys(report.errors).length === 0,
               'Test ran without errors');

      // Now remove TLS options and rerun - should have an error
      delete script.config.ws;
      vuserLauncher(script).then(function(sessions2) {
        sessions2.on('done', function(nr2) {
          const report2 = SSMS.legacyReport(nr2).report();
          t.assert(Object.keys(report2.errors).length === 1,
                   'Test ran with one error: ' +
                   (Object.keys(report2.errors)[0]));
          sessions.stop().then(() => {
            sessions2.stop().then(() => {
              t.end();
            });
          });
        });
        sessions2.run();
      });
    });
    sessions.run();
  });
});

test('Subprotocols - using a known subprotocol', function(t) {
  const script = require('./scripts/subprotocols.json');
  vuserLauncher(script).then((sessions) => {
    sessions.on('done', (nr) => {
      const report = SSMS.legacyReport(nr).report();
      t.assert(
        Object.keys(report.errors).length === 0,
        'Test with a subprotocol set completed with no errors');
      sessions.stop().then(() => {
          t.end();
      });
    });

    sessions.run();
  });
});

test('Subprotocols - no subprotocol', function(t) {
  const script = require('./scripts/subprotocols.json');

  delete script.config.ws;

  vuserLauncher(script).then((sessions) => {
    sessions.on('done', (nr) => {
      const report = SSMS.legacyReport(nr).report();
      t.assert(
        Object.keys(report.errors).length === 0,
        'Test with no subprotocol set completed with no errors');
      sessions.stop().then(() => {
          t.end();
      });
    });

    sessions.run();
  });
});

test('Subprotocols - unknown subprotocol', function(t) {
  const script = require('./scripts/subprotocols.json');

  script.config.ws = {
    subprotocols: ['unsupportedByTheServer']
  };

  vuserLauncher(script).then((sessions) => {
    sessions.on('done', (nr) => {
      const report = SSMS.legacyReport(nr).report();
      t.assert(
        Object.keys(report.errors).length === 1,
        'Should have one error');

      // FIXME: This test is coupled to the error message generated by the ws library
      t.assert(
        Object.keys(report.errors)[0].toLowerCase().indexOf('no subprotocol') > -1,
        'The error should be of "no subprotocol" type'
      );

      sessions.stop().then(() => {
        t.end();
      });
    });

    sessions.run();
  });
});
